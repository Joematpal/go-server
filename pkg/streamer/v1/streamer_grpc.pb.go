// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: pkg/streamer/v1/streamer.proto

package streamer_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StreamerServiceClient is the client API for StreamerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamerServiceClient interface {
	StreamPoint(ctx context.Context, opts ...grpc.CallOption) (StreamerService_StreamPointClient, error)
}

type streamerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamerServiceClient(cc grpc.ClientConnInterface) StreamerServiceClient {
	return &streamerServiceClient{cc}
}

func (c *streamerServiceClient) StreamPoint(ctx context.Context, opts ...grpc.CallOption) (StreamerService_StreamPointClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamerService_ServiceDesc.Streams[0], "/streamer.v1.StreamerService/StreamPoint", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamerServiceStreamPointClient{stream}
	return x, nil
}

type StreamerService_StreamPointClient interface {
	Send(*Point) error
	CloseAndRecv() (*Status, error)
	grpc.ClientStream
}

type streamerServiceStreamPointClient struct {
	grpc.ClientStream
}

func (x *streamerServiceStreamPointClient) Send(m *Point) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamerServiceStreamPointClient) CloseAndRecv() (*Status, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Status)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamerServiceServer is the server API for StreamerService service.
// All implementations should embed UnimplementedStreamerServiceServer
// for forward compatibility
type StreamerServiceServer interface {
	StreamPoint(StreamerService_StreamPointServer) error
}

// UnimplementedStreamerServiceServer should be embedded to have forward compatible implementations.
type UnimplementedStreamerServiceServer struct {
}

func (UnimplementedStreamerServiceServer) StreamPoint(StreamerService_StreamPointServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamPoint not implemented")
}

// UnsafeStreamerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamerServiceServer will
// result in compilation errors.
type UnsafeStreamerServiceServer interface {
	mustEmbedUnimplementedStreamerServiceServer()
}

func RegisterStreamerServiceServer(s grpc.ServiceRegistrar, srv StreamerServiceServer) {
	s.RegisterService(&StreamerService_ServiceDesc, srv)
}

func _StreamerService_StreamPoint_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamerServiceServer).StreamPoint(&streamerServiceStreamPointServer{stream})
}

type StreamerService_StreamPointServer interface {
	SendAndClose(*Status) error
	Recv() (*Point, error)
	grpc.ServerStream
}

type streamerServiceStreamPointServer struct {
	grpc.ServerStream
}

func (x *streamerServiceStreamPointServer) SendAndClose(m *Status) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamerServiceStreamPointServer) Recv() (*Point, error) {
	m := new(Point)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamerService_ServiceDesc is the grpc.ServiceDesc for StreamerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "streamer.v1.StreamerService",
	HandlerType: (*StreamerServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamPoint",
			Handler:       _StreamerService_StreamPoint_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "pkg/streamer/v1/streamer.proto",
}
